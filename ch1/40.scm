(define (newtons-method g guess)
  (define tolerance 0.00001)
  (define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
      (< (abs (- v1 v2))
	 tolerance))
    (define (try guess)
      (let ((next (f guess)))
	(if (close-enough? guess next)
	    next
	    (try next))))
    (try first-guess))
  (define dx 0.000001)
  (define (deriv f)
    (lambda (x) (/ (- (f (+ x dx)) (f x)) dx)))
  (define (newton-transform g)
    (lambda (x) (- x (/ (g x) ((deriv g) x))))) 
  (fixed-point (newton-transform g) guess))

;; approximates real zeroes of x^3 + ax^2 + bx + c
(define (cubic a b c guess)
  (newtons-method (lambda (x) (+ (expt x 3)
				 (* a (expt x 2))
				 (* b x)
				 c))
		  guess))
